<%perl>
	use Baseliner::Utils;
	my $iid = "div-" . _nowstamp;
	$c->stash->{job_types} = [
		{ name=>'job_type', inputValue=> 'promote', boxLabel => _loc('Promote'), checked=>\1 },
		{ name=>'job_type', inputValue=> 'demote', boxLabel => _loc('Demote') },
		{ name=>'job_type', inputValue=> 'rollback', boxLabel => _loc('Rollback') },
	];
	my $now = DateTime->now;
	$now->set_time_zone(_tz);
    my $today =  $now->strftime('%d/%m/%Y');
    my $hm =  $now->strftime('%H:%M');
</%perl>
<script type='text/javascript'>

Ext.onReady(function(){
    Ext.QuickTips.init();

    Baseliner.jobGridData = function() {
            // turn grid into JSON to post data
            var cnt = jc_grid.getStore().getCount();
            if( cnt == 0 ) {
                Ext.Msg.show({icon: 'ext-mb-error', buttons: { cancel: true }, title: "Form Error", msg: "<% _loc('Missing job contents') %>"});
                return 1;
            }
            var json = [];
            for( i=0; i<cnt; i++) {
                var rec = jc_grid.getStore().getAt(i);
                json.push( Ext.util.JSON.encode( rec.data )) ;
            }
            var json_res = '[' + json.join(',') + ']';
            return json_res;
    };

    Baseliner.jobResetAll = function() {
            main_form.getForm().reset();
            jc_grid.getStore().removeAll();
            ds_combo.removeAll();
    };
    Baseliner.calendar_reload = function() {
            var job_date = main_form.getForm().findField('job_date').getRawValue();
            var bl = main_form.getForm().findField('bl').getValue();
            var json_res = Baseliner.jobGridData();
            time_store.load({ params: { bl: bl, job_date: job_date, job_contents: json_res } });
            //TODO main_form.getForm().findField('job_date').setValue( time_store.getRowAt(0) );
            <%doc>
            Ext.Ajax.request({
                url: '/job/check_time',
                params: { bl: bl, job_date: job_date, job_contents: json_res },
                success: function(xhr) {
                    var times = eval( "("+xhr.responseText+")" );
                    for( var i in times.data ) {
                        var e = times.data[i];
                    }
                },
                failure: function(xhr) {
                    alert('ko');
                   //Baseliner.errorWin( 'Logout Error', xhr.responseText );
                }
            });
            </%doc>
    };
    var bd = Ext.get('jobForm<% $iid %>');
	//------ Tabbed Job Item list 	
	var tabpanel = new Ext.TabPanel({
		region: 'center',
		defaults: { closable: true, autoScroll: true }, 
		autoScroll: true,
		activeTab: 0 
	});
	var pp = new Ext.Panel({
		layout: 'fit',
		items: [ tabpanel ]
	});

	// hour validator
	Ext.form.VTypes['hourVal']  = /^[0-2][0-9]:[0-5][0-9]$/; 
	Ext.form.VTypes['hourMask'] = /[0-9:]/; 
	Ext.form.VTypes['hourText'] = '<% _loc('Invalid hour (00:00-23:59)') %>';
	Ext.form.VTypes['hour']     = function(v){ 
	   var t = Ext.form.VTypes['hourVal'].test(v); 
	   if( ! t ) return false;
	   var arr = v.split(":"); 
	   if( arr[0] > 23 ) return false;
	   if( arr[1] > 59 ) return false;
	   return true;
	} 

	var baselines = new Ext.data.SimpleStore({ 
	   fields: ['bl', 'name'], 
	   data : <% js_dumper( $c->stash->{baselines} ) %>
	}); 

    // Time Combo Template
    var time_tpl = new Ext.XTemplate(
        '<tpl for=".">',
            '<tpl if="type == \'N\'"><div class="search-item">',
                '<h5 style="color:green"><b>{time}</b> - <% _loc 'Normal Window' %> - {name}</h5>',
            '</div></tpl>',
            '<tpl if="type == \'U\'"><div class="search-item">',
                '<h5 style="color:red"><b>{time}</b> - <% _loc 'Urgent Window' %> - {name}</h5>',
            '</div></tpl>',
        '</tpl>'
    );
	var time_store = new Ext.data.JsonStore({ 
        root: 'data',
        url: '/job/check_time',
        fields: [ 
			{  name: 'time' },
			{  name: 'type' },
			{  name: 'available' },
			{  name: 'full_name' },
			{  name: 'name' }
		]
	}); 

    //    bd.createChild({tag: 'h2', html: 'Select the job contents'});
	//------- Search Combo
    var colModel = new Ext.grid.ColumnModel([
        {id:'item',header: "<% _loc('Job Item') %>", width: 160, sortable: true, locked:false, dataIndex: 'item'},
        {header: "<% _loc('Item Type') %>", width: 125, sortable: true, dataIndex: 'ns_type'},
        {header: "<% _loc('User') %>", width: 75, sortable: true, dataIndex: 'user'},
        {header: "<% _loc('Location') %>", width: 85, sortable: true, dataIndex: 'ns' },
        {header: "<% _loc('Last Updated') %>", width: 85, sortable: true, dataIndex: 'date' },
        {header: "<% _loc('Description') %>", width: 350, sortable: true, dataIndex: 'text'}
    ]);
    var ds_grid = new Ext.data.Store({});
	var jc_grid = new Ext.grid.GridPanel({
			width: 800,
			height: 300,
			style: 'margin-top: 20px',
			name: 'jc',
			title: '<% _loc('Job Contents') %>',
			border: true,
			ds: ds_grid,
			cm: colModel
	});
	var tb = new Ext.Toolbar({
			style: 'margin: 3px',
			items: [ 
<%doc>
				{
					text: 'List Job Items',
					icon:'/static/images/drop-add.gif',
					cls: 'x-btn-text-icon',
					handler: function() {
						var w = new Ext.Window({
							layout: 'fit',
							height: 600, width: 700,
							closeAction: 'hide',
							autoDestroy: false,
							title: 'Choose Job Items',
							items: pp
						});
						w.show();
					}
				},
</%doc>
				{
					xtype: 'button',
					text: '<% _loc('Remove Job Item') %>',
					icon:'/static/images/del.gif',
					cls: 'x-btn-text-icon',
					handler: function() {
						var sm = jc_grid.getSelectionModel();
						var sel = sm.getSelected();
						jc_grid.getStore().remove(sel);
					}
				},
			'->',
			{ xtype:'button', text: '<% _loc('Submit') %>', handler: function(){
                    var json_res = Baseliner.jobGridData();
					main_form.getForm().submit({
						params: { job_contents: json_res },
						success: function(form,action){
                            //form submit ok
							Baseliner.message("<% _loc('New Job') %>", action.result.msg);
                            // reset everything
                            Baseliner.jobResetAll();
						},
						failure: function(form,action){
                            //   not necessary, handled by standard failure?
							//Ext.Msg.show({ title: "<% _loc('Failure') %>", msg: action.result.msg, width: 500, buttons: { ok: true } });
						}
					});
				}
			},
			{ xtype:'button',text:'<% _loc('Reset') %>', handler: function() { 
                    Baseliner.jobResetAll();
				}  
			}] 
	});
	var main_form = new Ext.FormPanel({ 
			 url: '/job/submit', 
			 renderTo: 'jobForm<% $iid %>',
			 frame: true, 
			 title: '<% _loc('Job Options') %>', 
			 width: 900, 
			 items: [
				 tb,
				 { xtype: 'radiogroup',
                        name: 'job_type',
                        columns: 3,
                        width: 300,
                        fieldLabel: '<% _loc('Job Type') %>',
                        listeners: {
                           change: { fn: function(){
                               ds_combo.removeAll();
                               jc_grid.getStore().removeAll();
                           } }
                        },
                        items: <% js_dumper(  $c->stash->{job_types} ) %>
				}, 
				{
					   xtype: 'combo', 
					   name: 'bl', 
					   hiddenName: 'bl',
					   fieldLabel: '<% _loc('Baseline') %>', 
					   mode: 'local', 
					   store: baselines, 
					   valueField: 'bl',
					   value: '<% $c->stash->{baselines}->[0]->[0] %>',
					   displayField:'name', 
					   editable: false,
					   forceSelection: true,
					   triggerAction: 'all',
					   allowBlank: false,
					   listeners: {
					   	   select: { fn: function(){
                               ds_combo.removeAll();
                               jc_grid.getStore().removeAll();
                           } }
						},
					   width: 120 
				}, 
				  { 
					xtype: 'textarea', 
					fieldLabel: '<% _loc('Comments') %>', 
					width: 500,
					name: 'comments' 
				  },
				  { 
                    xtype: 'datefield', 
					fieldLabel: '<% _loc('Date') %>', 
				    allowBlank: false,
					format: 'd/m/Y',
					value: '<% $today %>',
					minValue: '<% $today %>',
					listeners: {
					   	   select: { fn: function(a,b){ Baseliner.calendar_reload();  } }
					},
					name: 'job_date' 
				  },
                  {
					   xtype: 'combo', 
					   name: 'job_time', 
					   hiddenName: 'job_time',
					   fieldLabel: '<% _loc('Time') %>', 
					   mode: 'local', 
					   valueField: 'time',
					   displayField:'full_name', 
                       itemSelector: 'div.search-item',
                       store: time_store,
                       tpl: time_tpl,
					   editable: false,
					   forceSelection: true,
					   triggerAction: 'all',
					   allowBlank: false,
					   width: 500 
                  }, 
                  <%doc>
				  { 
					xtype: 'textfield', 
					fieldLabel: '<% _loc('Time') %>', 
				    allowBlank: false,
					value: '<% $hm %>',
					vtype: 'hour',
					name: 'job_time2' 
				  },
                  </%doc>
				  jc_grid
			  ] 
		  }); 

    Ext.form.Field.prototype.msgTarget = 'side';

	//-------------
    var ds_combo = new Ext.data.Store({
        proxy: new Ext.data.HttpProxy({
            url: '/job/items/json',
			param: { bl: main_form.getForm().findField('bl').getValue() }
        }),
		listeners: {
			beforeload: {
				fn: function(store,opt) {
					var bl = main_form.getForm().findField('bl').getValue(); 
					var job_type = main_form.getForm().getValues()['job_type'];
					store.baseParams.bl = bl;
					store.baseParams.job_type = job_type;
				}
			},
			load: {
				fn: function(store,opt) {
					if( store.getTotalCount() == 0 ) {
						Baseliner.message("<% _loc('Warning') %>", "<% _loc('No records found') %>");
					}
				}
			}
		},
        reader: new Ext.data.JsonReader({
            root: 'data',
            totalProperty: 'totalCount',
            id: 'id'
        }, [
            {name: 'provider', mapping: 'provider'},
            {name: 'related', mapping: 'related'},
            {name: 'ns_type', mapping: 'ns_type'},
            {name: 'item', mapping: 'item'},
            {name: 'user', mapping: 'user'},
            {name: 'service', mapping: 'service'},
            {name: 'ns', mapping: 'ns'},
            {name: 'date', mapping: 'date'},
            {name: 'icon', mapping: 'icon'},
            {name: 'data', mapping: 'data'},
            {name: 'text', mapping: 'text'}
        ])
    });

    // Custom rendering Template
    var resultTpl = new Ext.XTemplate(
        '<tpl for="."><div class="search-item">',
            '<h3><span>{ns_type}<br />by {user}</span><img src="{icon}" />{item}</h3>',
            '{text}',
        '</div></tpl>'
    );

    var search = new Ext.form.ComboBox({
        store: ds_combo,
        minChars :3,
        displayField:'item',
        typeAhead: false,
        loadingText: '<% _loc('Searching...') %>',
        width: 550,
		resizable: true,
        lazyRender: false,
        pageSize:20,
        hideTrigger:true,
        tpl: resultTpl,
        applyTo: 'search<% $iid %>',
        itemSelector: 'div.search-item',
        listeners: {
            // delete the previous query in the beforequery event or set
            // combo.lastQuery = null (this will reload the store the next time it expands)
            beforequery: function(qe){
                delete qe.combo.lastQuery;
            }
        },
        onSelect: function(record){ 
            try {
                // add from combo to grid
                ds_grid.add(record);
                // recalculate calendar
                Baseliner.calendar_reload();
            } catch(e) {
            }
        }
    });

    if( Ext.isIE ) document.getElementById('search<% $iid %>').style.top = 0; // hack fix

});

</script>

<div class='tab-style' style="width:600px;">
    <div class="x-box-tl">
        <div class="x-box-tr">
            <div class="x-box-tc">
            </div>
        </div>
    </div>
    <div class="x-box-ml">
        <div class="x-box-mr">
            <div class="x-box-mc">
                <h3 style="margin-bottom:5px;"><% _loc('Add Job Items') %></h3>
                <input type="text" name="search<% $iid %>" id="search<% $iid %>" ></input>
                <div style="padding-top:4px;"><% _loc('Live search requires a minimum of %1 characters.', 3) %></div>
            </div>
        </div>
    </div>
    <div class="x-box-bl">
        <div class="x-box-br">
            <div class="x-box-bc">
            </div>
        </div>
    </div>
</div>

<div class='tab-style' id='jobForm<% $iid %>'>
</div>



